#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

class Matrix;

class Vector {
    friend class Matrix;
private:
    int dim; 
    double* d; 
    int num; 
    inline static int count = 0;
public:
    Vector() : dim(0), d(nullptr), num(0) {
        count++;
        cout << "Creating a defolt vector, number of objects: " << count << endl;
    }

    Vector(int n) : dim(n), d(new double[n]), num(n) {
        count++;
        cout << "Creating a vector in size " << n << ", number of objects: " << count << endl;
    }

    Vector(double* d, int n) : dim(n), d(new double[n]), num(n) {
        for (int i = 0; i < n; i++) {
            this->d[i] = d[i];
        }
        count++;
        cout << "Creating a vector in size " << n << ", number of objects: " << count << endl;
    }

    Vector(const Vector& v) : dim(v.dim), d(new double[v.num]), num(v.num) {
        for (int i = 0; i < num; i++) {
            d[i] = v.d[i];
        }
        count++;
        cout << "Creating a copy vector in size " << num << " , number of objects: " << count << endl;
    }

    ~Vector() {
        delete[](d);
        count--;
        cout << "Delere a vector, number of objects: " << count << endl;
    }

    void print() const {
        for (int i = 0; i < num; i++) {
            cout << d[i] << " ";
        }
        cout << endl;
    }

    Vector operator+(const Vector& v) {
        if (num != v.num) {
            cout << "The sizes don't match. It's impossible to add two vectors." << endl;
            return Vector{};
        }
        Vector res(num);
        for (int i = 0; i < num; i++) {
            res.d[i] = d[i] + v.d[i];
        }

        return res;
    }

    Vector operator-(const Vector& v) {
        if (num != v.num) {
            cout << "The sizes don't match. It's impossible to add two vectors." << endl;
            return Vector{};
        }
        Vector res(num);
        for (int i = 0; i < num; i++) {
            res.d[i] = d[i] - v.d[i];
        }

        return res;
    }

    Vector operator*(const Vector& v) {
        if (num != v.num) {
            cout << "The sizes don't match. It's impossible to add two vectors." << endl;
            return Vector{};
        }
        Vector res(num);
        for (int i = 0; i < num; i++) {
            res.d[i] = d[i] * v.d[i];
        }

        return res;
    }

    // -v
    Vector& operator-() {
        for (int i = 0; i < num; i++) {
            d[i] = -d[i];
        }
        return *this;
    }

    Vector& operator*(int k) {
        for (int i = 0; i < num; i++) {
            d[i] = d[i] * k;
        }
        return *this;
    }

    Vector& operator=(const Vector& v) {
        if (dim < v.dim) {
            d = new double[v.dim];
            dim = v.dim;
        }
        num = v.num;
        for (int i = 0; i < v.num; i++) {
            d[i] = v.d[i];
        }
        return *this;
    }

    int get_size() const {
        return num;
    }
};

class Matrix {
private:
    int dim; 
    int dim2; 
    double** d;
    int num; 
    int num2;
    inline static int count = 0;
public:
    Matrix() : dim(0), dim2(0), d(nullptr), num(0), num2(0) {
        count++;
        cout << "Creatinf a defolt matrix, number of objects: " << count << endl;
    }

    Matrix(int n, int n2, bool flag) : dim(n), dim2(n2), num(n), num2(n2) {
        d = new double* [n];
        for (int i = 0; i < n; i++) {
            d[i] = new double[n2];
        }

        if (flag) {
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num2; j++) {
                    d[i][j] = rand() % 20;
                }
            }
        }

        count++;
        cout << "Creating a matrix in size" << n << " x " << n2 << ", number of objects: " << count << endl;
    }

    Matrix(const Matrix& m) : dim(m.dim), dim2(m.dim2), num(m.num), num2(m.num2) {
        d = new double* [m.num];
        for (int i = 0; i < m.num; i++) {
            d[i] = new double[m.num2];
        }

        for (int i = 0; i < m.num; i++) {
            for (int j = 0; j < m.num2; j++) {
                this->d[i][j] = m.d[i][j];
            }
        }
        count++;
        cout << "Creating a copy matrix " << num << ", number of objects: " << count << endl;
    }


    ~Matrix() {
        for (int i = 0; i < num; i++) {
            delete[](d[i]);
        }
        delete[](d);
        count--;
        cout << "Delete a matrix, number of objects: " << count << endl;
    }

    void print() const {
        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num2; j++) {
                cout << setw(4) << d[i][j];
            }
            cout << endl;
        }
        cout << endl;
    }

    Matrix operator+(const Matrix& m) {
        if (num != m.num || num2 != m.num2) {
            cout << "The sizes don't match. It's impossible to add two matrix" << endl;
            return Matrix{};
        }
        Matrix res(num, num2, false);
        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num2; j++) {
                res.d[i][j] = d[i][j] + m.d[i][j];
            }
        }

        return res;
    }

    Matrix operator-(const Matrix& m) {
        if (num != m.num || num2 != m.num2) {
            cout << "The sizes don't match. It's impossible to add two matrix" << endl;
            return Matrix{};
        }
        Matrix res(num, num2, false);
        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num2; j++) {
                res.d[i][j] = d[i][j] - m.d[i][j];
            }
        }

        return res;
    }

    Matrix operator*(const Matrix& m) {
        if (num2 != m.num) {
            cout << "The sizes don't match. It's impossible to add two matrix" << endl;
            return Matrix{};
        }
        Matrix res(num, m.num2, false);

        for (int i = 0; i < num; i++) {
            for (int j = 0; j < m.num2; j++) {
                res.d[i][j] = 0;
                for (int k = 0; k < m.num; k++) {
                    res.d[i][j] += d[i][k] * m.d[k][j];
                }
            }
        }
        return res;
    }

    // -m
    Matrix& operator-() {
        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num2; j++) {
                d[i][j] = -d[i][j];
            }
        }
        return *this;
    }

    Matrix& operator*(int k) {
        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num2; j++) {
                d[i][j] *= k;
            }
        }
        return *this;
    }

    Matrix& operator=(const Matrix& m) {
        num = m.num;
        num2 = m.num2;

        double** d2 = new double* [num];
        for (int i = 0; i < num; i++) {
            d2[i] = new double[num2];
        }

        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num2; j++) {
                d2[i][j] = m.d[i][j];
            }
        }

        d = new double* [num];
        for (int i = 0; i < num; i++) {
            d[i] = new double[num2];
        }

        for (int i = 0; i < num; i++) {
            for (int j = 0; j < num2; j++) {
                d[i][j] = d2[i][j];
            }
        }

        delete[](d2);
        return *this;
    }

    Matrix& operator*(const Vector& v)
    {
        if (v.num != num2)
        {
            cout << "Error. The sizes don't match";
            return *this;
        }
        for (int i = 0; i < num; i++)
        {
            for (int j = 0; j < num2; j++)
            {
                d[i][j] *= v.d[j];
            }
        }
        return *this;
    }

    int get_size() const {
        return num * num2;
    }
};

int main() {
    double d1[3]{ 1, 2, 3 };
    double d2[3]{ 4, 5, 6 };
    Vector v(d1, 3);
    Vector v2(d2, 3);

    cout << "Vector 1:" << endl;
    v.print();

    cout << "Vector 2:" << endl;
    v2.print();

    Vector v3 = v * v2;

    cout << "Vector 3:" << endl;
    if (v3.get_size() == 0) {
        v3.print();
    }
    else {
        cout << "Empty vector" << endl;
    }

    v3 = -v3;

    cout << "Vector 3 (-v3):" << endl;
    if (v3.get_size() == 0) {
        v3.print();
    }
    else {
        cout << "Empty vector" << endl;
    }

    v3 = v3 * 4;

    cout << "Vector 3 (v3 * 4):" << endl;
    if (v3.get_size() == 0) {
        v3.print();
    }
    else {
        cout << "Empty vector" << endl;
    }

    Vector v4 = v3;

    cout << "Vector 4 (v4 = v3):" << endl;
    if (v4.get_size() == 0) {
        v4.print();
    }
    else {
        cout << "Empty vector" << endl;
    }

    Vector v5 = v + v2;

    cout << "Vector 5 (v + v2):" << endl;
    if (v5.get_size() == 0) {
        v5.print();
    }
    else {
        cout << "Empty vector" << endl;
    }

    v5 = v - v2;

    cout << "Vector 5 (v - v2):" << endl;
    if (v5.get_size() == 0) {
        v5.print();
    }
    else {
        cout << "Empty vector" << endl;
    }


    double** dm1 = new double* [3];
    double** dm2 = new double* [3];
    for (int i = 0; i < 3; i++) {
        dm1[i] = new double[4];
        dm2[i] = new double[4];
        for (int j = 0; j < 4; j++) {
            dm1[i][j] = rand() % 20;
            dm2[i][j] = rand() % 10;
        }
    }

    Matrix mat1(3, 4, true);
    Matrix mat2(3, 4, true);

    cout << "\n\nMatrix 1:" << endl;
    mat1.print();

    cout << "\n\nMatrix 2:" << endl;
    mat2.print();

    Matrix mat3 = mat1 + mat2;

    cout << "\n\nMatrix 3 (1 + 2):" << endl;
    mat3.print();

    Matrix mat4 = mat1 - mat2;

    cout << "\n\nMatrix 4 (1 - 2):" << endl;
    mat4.print();

    mat4 = -mat4;

    cout << "\n\nMatrix 4 (-mat4):" << endl;
    mat4.print();

    mat4 = mat4 * 2;

    cout << "\n\nMatrix 4 (mat4 * 2):" << endl;
    mat4.print();

    Matrix mat5(4, 3, true);

    cout << "\n\nMatrix 5:" << endl;
    mat5.print();

    Matrix mat6 = mat1 * mat5;

    if (mat6.get_size() != 0) {
        cout << "\n\nMatrix 6 (mat1 * mat5):" << endl;
        mat6.print();
    }
    else {
        cout << "\n\nEmpty matrix" << endl;
    }

    Matrix mat7 = mat1 * mat2;

    if (mat7.get_size() != 0) {
        cout << "\n\nMatrix 7 (mat1 * mat2):" << endl;
        mat7.print();
    }
    else {
        cout << "\n\nEmpty matrix" << endl;
    }

    Matrix mat8(1, 3, true);
    Matrix mat9(4, 4, true);

    mat9 = mat8;

    cout << "\n\nMatrix 9:" << endl;
    mat9.print();

    Matrix mat10 = mat4 * v;
    cout << "\n\nMatrix 10:" << endl;
    mat10.print();
}
