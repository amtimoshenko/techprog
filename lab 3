#include <iostream>    
#include <cmath>       
#include <vector>       


class Point {
protected:
    double x, y;

public:
    Point(double x, double y) : x(x), y(y) {}

    double getx() const {
        return x;
    }

    double gety() const {
        return y;
    }

    virtual ~Point() = default;

    virtual void draw() const = 0;
    virtual void erase() const = 0;
    virtual void move(double dx, double dy) {
        x += dx;
        y += dy;
    }

    virtual void rotate(double angle_rad, const Point& center) = 0;

};

double distance(const Point& a, const Point& b) {
    return std::sqrt((a.getx() - b.getx()) * (a.getx() - b.getx()) +
        (a.gety() - b.gety()) * (a.gety() - b.gety()));
}

// скалярное произведение
double dot(const Point& a, const Point& b, const Point& c) {
    double abx = b.getx() - a.getx();
    double aby = b.gety() - a.gety();
    double bcx = c.getx() - b.getx();
    double bcy = c.gety() - b.gety();
    return abx * bcx + aby * bcy;
}

// --- Конкретная точка ---
class SpecificPoint : public Point {
public:
    SpecificPoint(double x, double y) : Point(x, y) {}

    void draw() const override {
        std::cout << "Point at (" << x << ", " << y << ")\n";
    }

    void erase() const override {
        std::cout << "Erasing point at (" << x << ", " << y << ") \n";
    }

    void rotate(double angle_rad, const Point& center) override {
        double s = sin(angle_rad);
        double c = cos(angle_rad);

        double new_x = c * (x - center.getx()) - s * (y - center.gety()) + center.getx();
        double  new_y = s * (x - center.getx()) + c * (y - center.gety()) + center.gety();

        x = new_x;
        y = new_y;

    }
};

// --- Линия ----
class Line {
protected:
    SpecificPoint p1, p2;

public:
    int publicLength = 100;


public:
    Line(double x1, double y1, double x2, double y2) : p1(x1, y1), p2(x2, y2) {}

    virtual ~Line() = default;

    virtual void draw() const {
        std::cout << "Line from (" << p1.getx() << ", " << p1.gety() << ") to ()" << p2.getx() << ", " << p2.gety() << ")\n";
    }

    virtual void erase() const {
        std::cout << "Erasing. \n";
    }

    virtual void move(double dx, double dy) {
        p1.move(dx, dy);
        p2.move(dx, dy);
    }

    virtual void rotate(double angle_rad, const Point& center) {
        p1.rotate(angle_rad, center);
        p2.rotate(angle_rad, center);
    }

};

// --- Параллелограмм ---- 
class Parallelogram : public virtual Line {
protected:
    SpecificPoint p3, p4;

public:
    Parallelogram(double x1, double y1, double x2, double y2,
        double x3, double y3, double x4, double y4)
        : Line(x1, y1, x2, y2), p3(x3, y3), p4(x4, y4) {
    }

    void draw() const override {
        std::cout << "Parallelogram:\n";
        p1.draw();
        p2.draw();
        p3.draw();
        p4.draw();
    }

    void erase() const override {
        std::cout << "Erasing parallelogram. \n";
    }

    void move(double dx, double dy) override {
        p1.move(dx, dy);
        p2.move(dx, dy);
        p3.move(dx, dy);
        p4.move(dx, dy);
    }

    void rotate(double angle_rad, const Point& center) override {
        p1.rotate(angle_rad, center);
        p2.rotate(angle_rad, center);
        p3.rotate(angle_rad, center);
        p4.rotate(angle_rad, center);
    }
};

// ---- Прямоугольник ----
class Rectangle : public Parallelogram {
public:
    Rectangle(double x1, double y1, double x2, double y2,
        double x3, double y3, double x4, double y4)
        : Line(x1, y1, x2, y2), Parallelogram(x1, y1, x2, y2, x3, y3, x4, y4) {
    }

    void draw() const override {
        std::cout << "Rectangle: \n";
        Parallelogram::draw();
    }

    void erase() const override {
        std::cout << "Erasing rectangle. \n";
    }

    bool isValid() const {
        double d1 = distance(p1, p2);
        double d2 = distance(p2, p3);
        double d3 = distance(p3, p4);
        double d4 = distance(p4, p1);
        double dot1 = dot(p1, p2, p3);
        double dot2 = dot(p2, p3, p4);
        return std::abs(d1 - d3) < 1e-6 &&
            std::abs(d2 - d4) < 1e-6 &&
            std::abs(dot1) < 1e-6 &&
            std::abs(dot2) < 1e-6;
    }

    bool hasRightAngles(const Point& p1, const Point& p2,
        const Point& p3, const Point& p4) {
        // Проверим 4 угла
       // скалярное произведение должно быть 0 тк углы 90 градусов
        return std::abs(dot(p1, p2, p3)) < 1e-6 &&
            std::abs(dot(p2, p3, p4)) < 1e-6 &&
            std::abs(dot(p3, p4, p1)) < 1e-6 &&
            std::abs(dot(p4, p1, p2)) < 1e-6;
    }
};

// --- Ромб ---
class Rhombus : public Parallelogram {
public:
    Rhombus(double x1, double y1, double x2, double y2,
        double x3, double y3, double x4, double y4)
        : Line(x1, y1, x2, y2), Parallelogram(x1, y1, x2, y2, x3, y3, x4, y4) {
    }

    void draw() const override {
        std::cout << "Rhombus:\n";
        Parallelogram::draw();
    }

    void erase() const override {
        std::cout << "Erasing rhombus. \n";
    }

    bool isValid() const {
        double d1 = distance(p1, p2);
        double d2 = distance(p2, p3);
        double d3 = distance(p3, p4);
        double d4 = distance(p4, p1);
        return std::abs(d1 - d2) < 1e-6 &&
            std::abs(d2 - d3) < 1e-6 &&
            std::abs(d3 - d4) < 1e-6;
    }
};

// --- Квадрат ---
class Square : public virtual Parallelogram {
public:
    Square(double x1, double y1, double x2, double y2,
        double x3, double y3, double x4, double y4)
        : Line(x1, y1, x2, y2),
        Parallelogram(x1, y1, x2, y2, x3, y3, x4, y4) {
    }

    void draw() const override {
        std::cout << "Square:\n";
        Parallelogram::draw();
    }

    void erase() const override {
        std::cout << "Erasing square. \n";
    }

    bool isValid() const {
        double d1 = distance(p1, p2);
        double d2 = distance(p2, p3);
        double d3 = distance(p3, p4);
        double d4 = distance(p4, p1);
        double dot1 = dot(p1, p2, p3);
        double dot2 = dot(p2, p3, p4);
        return std::abs(d1 - d2) < 1e-6 &&
            std::abs(d2 - d3) < 1e-6 &&
            std::abs(d3 - d4) < 1e-6 &&
            std::abs(dot1) < 1e-6 &&
            std::abs(dot2) < 1e-6;
    }


    bool hasRightAngles(const Point& p1, const Point& p2,
        const Point& p3, const Point& p4) {
        // Проверим 4 угла
       // скалярное произведение должно быть 0 тк углы 90 градусов
        return std::abs(dot(p1, p2, p3)) < 1e-6 &&
            std::abs(dot(p2, p3, p4)) < 1e-6 &&
            std::abs(dot(p3, p4, p1)) < 1e-6 &&
            std::abs(dot(p4, p1, p2)) < 1e-6;
    }
};

int main() {
    std::vector<Parallelogram*> figures;

    // Создаём три фигуры с другими координатами
    figures.push_back(new Square(1, 1, 3, 1, 3, 3, 1, 3));           // Квадрат 2x2
    figures.push_back(new Rectangle(0, 0, 4, 0, 4, 2, 0, 2));        // Прямоугольник 4x2
    figures.push_back(new Rhombus(0, 0, 2, 1, 4, 0, 2, -1));         // Ромб

    // Центр вращения — центр квадрата (2, 2)
    SpecificPoint rotationCenter(2, 2);

    for (Parallelogram* fig : figures) {
        std::cout << "=== BEFORE ===\n";
        fig->draw();

        std::cout << "--- Moving by vector (2, -1) ---\n";
        fig->move(2, -1);
        fig->draw();

        std::cout << "--- Rotating by 90 degrees ---\n";
        fig->rotate(3.1415 / 2, rotationCenter);  // 90° поворот
        fig->draw();

        std::cout << "--- Erasing ---\n";
        fig->erase();

        std::cout << "===========================\n";
    }

    // Освобождаем память
    for (Parallelogram* fig : figures) {
        delete fig;
    }


    // проверка позднего связывания
    Line* shape1 = new Square(0, 0, 1, 0, 1, 1, 0, 1);
    Line* shape2 = new Rectangle(0, 0, 2, 0, 2, 1, 0, 1);

    std::cout << "--- Late binding check ---\n";
    shape1->draw(); // вызовет Square::draw()
    shape2->draw(); // вызовет Rectangle::draw()

    delete shape1;
    delete shape2;

      return 0;
}
